plugins {
    id 'java'
    id 'eclipse'
    id 'jacoco'
    id 'checkstyle'
    id "org.sonarqube" version "3.3"
}

group 'dk.mada'
version '1.0.0-SNAPSHOT'

repositories {
    mavenCentral()
    mavenLocal()
}

configurations {
    apt
}

dependencies {
    implementation 'io.swagger.parser.v3:swagger-parser:2.0.26'
    implementation 'com.samskivert:jmustache:1.15'

    apt        'org.immutables:value:2.8.2'
    compileOnly         'org.immutables:value:2.8.2:annotations'
    annotationProcessor 'org.immutables:value:2.8.2'

    implementation 'org.slf4j:slf4j-jdk14:2.0.0-alpha5'

    testImplementation(platform('org.junit:junit-bom:5.8.2'))
    testImplementation('org.junit.jupiter:junit-jupiter')
    testImplementation('org.junit.jupiter:junit-jupiter-params')
    testImplementation('org.junit.jupiter:junit-jupiter-engine')
    testImplementation('org.junit.jupiter:junit-jupiter-api')
    testImplementation('org.junit.platform:junit-platform-runner')
    testImplementation("org.assertj:assertj-core:3.21.0")
	
    // for the generated code
    testImplementation 'jakarta.annotation:jakarta.annotation-api:1.3.5'
    testImplementation "jakarta.json.bind:jakarta.json.bind-api:1.0.1"
    testImplementation 'jakarta.json:jakarta.json-api:1.1.6'
    testImplementation "org.codehaus.jackson:jackson-mapper-asl:1.9.13"
    testImplementation "jakarta.ws.rs:jakarta.ws.rs-api:3.0.0"
    testImplementation "javax.ws.rs:javax.ws.rs-api:2.1.1"
}


java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
	
    systemProperty("run_all_tests", "true")
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    reports {
        xml.required.set(true)
    }
    dependsOn test // tests are required to run before generating the report
}

tasks.eclipse.doLast {
    String valueJarPath = configurations.apt.getSingleFile().getAbsolutePath()
	
    File factoryPath = file(".factorypath")
    factoryPath.delete()
    factoryPath << """<factorypath>
  <factorypathentry kind="EXTJAR" id="${valueJarPath}" enabled="true" runInBatchMode="false"/>
</factorypath>
"""
}

checkstyle {
    ignoreFailures = true
}

sonarqube {
    properties {
        property "sonar.exclusions", "**/Immutable*.java"

        property "sonar.projectKey", "jskov_openapi-jaxrs-client"
        property "sonar.organization", "jskov-github"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}