/*
 * openapi-examples API
 * 
 *
 * The version of the OpenAPI document: 1.0.0-SNAPSHOT
 * 
 *
 * This class was auto generated by openapi-jaxrs-client (https://github.com/jskov/openapi-jaxrs-client).
 * Do not edit the class manually.
 */

package mada.tests.e2e.dto.maps.dto;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * MapsDto
 */
public class MapsDto   {
  private Map<String, Boolean> booleans = new HashMap<>();

  private Map<String, Byte> bytes = new HashMap<>();

  private Map<String, Short> shorts = new HashMap<>();

  private Map<String, Integer> ints = new HashMap<>();

  private Map<String, Long> longs = new HashMap<>();

  private Map<String, String> strings = new HashMap<>();

  private Map<String, Simple> refs = new HashMap<>();

  private Map<String, Boolean> bothBooleans = new HashMap<>();

  private Map<String, Byte> bothBytes = new HashMap<>();

  private Map<String, Short> bothShorts = new HashMap<>();

  private Map<String, Integer> bothInts = new HashMap<>();

  private Map<String, Long> bothLongs = new HashMap<>();

  private Map<String, String> bothStrings = new HashMap<>();

  private Map<String, Simple> bothRefs = new HashMap<>();

  private Map<String, Object> objects = new HashMap<>();

  public MapsDto booleans(Map<String, Boolean> booleans) {
    this.booleans = booleans;
    return this;
  }

  public MapsDto putBooleansItem(String key, boolean booleansItem) {
    if (this.booleans == null) {
      this.booleans = new HashMap<>();
    }
    this.booleans.put(key, booleansItem);
    return this;
  }

  /**
   * Get booleans
   * @return booleans
   **/
  public Map<String, Boolean> getBooleans() {
    return booleans;
  }

  public void setBooleans(Map<String, Boolean> booleans) {
    this.booleans = booleans;
  }

  public MapsDto bytes(Map<String, Byte> bytes) {
    this.bytes = bytes;
    return this;
  }

  public MapsDto putBytesItem(String key, byte bytesItem) {
    if (this.bytes == null) {
      this.bytes = new HashMap<>();
    }
    this.bytes.put(key, bytesItem);
    return this;
  }

  /**
   * Get bytes
   * @return bytes
   **/
  public Map<String, Byte> getBytes() {
    return bytes;
  }

  public void setBytes(Map<String, Byte> bytes) {
    this.bytes = bytes;
  }

  public MapsDto shorts(Map<String, Short> shorts) {
    this.shorts = shorts;
    return this;
  }

  public MapsDto putShortsItem(String key, short shortsItem) {
    if (this.shorts == null) {
      this.shorts = new HashMap<>();
    }
    this.shorts.put(key, shortsItem);
    return this;
  }

  /**
   * Get shorts
   * @return shorts
   **/
  public Map<String, Short> getShorts() {
    return shorts;
  }

  public void setShorts(Map<String, Short> shorts) {
    this.shorts = shorts;
  }

  public MapsDto ints(Map<String, Integer> ints) {
    this.ints = ints;
    return this;
  }

  public MapsDto putIntsItem(String key, int intsItem) {
    if (this.ints == null) {
      this.ints = new HashMap<>();
    }
    this.ints.put(key, intsItem);
    return this;
  }

  /**
   * Get ints
   * @return ints
   **/
  public Map<String, Integer> getInts() {
    return ints;
  }

  public void setInts(Map<String, Integer> ints) {
    this.ints = ints;
  }

  public MapsDto longs(Map<String, Long> longs) {
    this.longs = longs;
    return this;
  }

  public MapsDto putLongsItem(String key, long longsItem) {
    if (this.longs == null) {
      this.longs = new HashMap<>();
    }
    this.longs.put(key, longsItem);
    return this;
  }

  /**
   * Get longs
   * @return longs
   **/
  public Map<String, Long> getLongs() {
    return longs;
  }

  public void setLongs(Map<String, Long> longs) {
    this.longs = longs;
  }

  public MapsDto strings(Map<String, String> strings) {
    this.strings = strings;
    return this;
  }

  public MapsDto putStringsItem(String key, String stringsItem) {
    if (this.strings == null) {
      this.strings = new HashMap<>();
    }
    this.strings.put(key, stringsItem);
    return this;
  }

  /**
   * Get strings
   * @return strings
   **/
  public Map<String, String> getStrings() {
    return strings;
  }

  public void setStrings(Map<String, String> strings) {
    this.strings = strings;
  }

  public MapsDto refs(Map<String, Simple> refs) {
    this.refs = refs;
    return this;
  }

  public MapsDto putRefsItem(String key, Simple refsItem) {
    if (this.refs == null) {
      this.refs = new HashMap<>();
    }
    this.refs.put(key, refsItem);
    return this;
  }

  /**
   * Get refs
   * @return refs
   **/
  public Map<String, Simple> getRefs() {
    return refs;
  }

  public void setRefs(Map<String, Simple> refs) {
    this.refs = refs;
  }

  public MapsDto bothBooleans(Map<String, Boolean> bothBooleans) {
    this.bothBooleans = bothBooleans;
    return this;
  }

  public MapsDto putBothBooleansItem(String key, boolean bothBooleansItem) {
    if (this.bothBooleans == null) {
      this.bothBooleans = new HashMap<>();
    }
    this.bothBooleans.put(key, bothBooleansItem);
    return this;
  }

  /**
   * Get bothBooleans
   * @return bothBooleans
   **/
  public Map<String, Boolean> getBothBooleans() {
    return bothBooleans;
  }

  public void setBothBooleans(Map<String, Boolean> bothBooleans) {
    this.bothBooleans = bothBooleans;
  }

  public MapsDto bothBytes(Map<String, Byte> bothBytes) {
    this.bothBytes = bothBytes;
    return this;
  }

  public MapsDto putBothBytesItem(String key, byte bothBytesItem) {
    if (this.bothBytes == null) {
      this.bothBytes = new HashMap<>();
    }
    this.bothBytes.put(key, bothBytesItem);
    return this;
  }

  /**
   * Get bothBytes
   * @return bothBytes
   **/
  public Map<String, Byte> getBothBytes() {
    return bothBytes;
  }

  public void setBothBytes(Map<String, Byte> bothBytes) {
    this.bothBytes = bothBytes;
  }

  public MapsDto bothShorts(Map<String, Short> bothShorts) {
    this.bothShorts = bothShorts;
    return this;
  }

  public MapsDto putBothShortsItem(String key, short bothShortsItem) {
    if (this.bothShorts == null) {
      this.bothShorts = new HashMap<>();
    }
    this.bothShorts.put(key, bothShortsItem);
    return this;
  }

  /**
   * Get bothShorts
   * @return bothShorts
   **/
  public Map<String, Short> getBothShorts() {
    return bothShorts;
  }

  public void setBothShorts(Map<String, Short> bothShorts) {
    this.bothShorts = bothShorts;
  }

  public MapsDto bothInts(Map<String, Integer> bothInts) {
    this.bothInts = bothInts;
    return this;
  }

  public MapsDto putBothIntsItem(String key, int bothIntsItem) {
    if (this.bothInts == null) {
      this.bothInts = new HashMap<>();
    }
    this.bothInts.put(key, bothIntsItem);
    return this;
  }

  /**
   * Get bothInts
   * @return bothInts
   **/
  public Map<String, Integer> getBothInts() {
    return bothInts;
  }

  public void setBothInts(Map<String, Integer> bothInts) {
    this.bothInts = bothInts;
  }

  public MapsDto bothLongs(Map<String, Long> bothLongs) {
    this.bothLongs = bothLongs;
    return this;
  }

  public MapsDto putBothLongsItem(String key, long bothLongsItem) {
    if (this.bothLongs == null) {
      this.bothLongs = new HashMap<>();
    }
    this.bothLongs.put(key, bothLongsItem);
    return this;
  }

  /**
   * Get bothLongs
   * @return bothLongs
   **/
  public Map<String, Long> getBothLongs() {
    return bothLongs;
  }

  public void setBothLongs(Map<String, Long> bothLongs) {
    this.bothLongs = bothLongs;
  }

  public MapsDto bothStrings(Map<String, String> bothStrings) {
    this.bothStrings = bothStrings;
    return this;
  }

  public MapsDto putBothStringsItem(String key, String bothStringsItem) {
    if (this.bothStrings == null) {
      this.bothStrings = new HashMap<>();
    }
    this.bothStrings.put(key, bothStringsItem);
    return this;
  }

  /**
   * Get bothStrings
   * @return bothStrings
   **/
  public Map<String, String> getBothStrings() {
    return bothStrings;
  }

  public void setBothStrings(Map<String, String> bothStrings) {
    this.bothStrings = bothStrings;
  }

  public MapsDto bothRefs(Map<String, Simple> bothRefs) {
    this.bothRefs = bothRefs;
    return this;
  }

  public MapsDto putBothRefsItem(String key, Simple bothRefsItem) {
    if (this.bothRefs == null) {
      this.bothRefs = new HashMap<>();
    }
    this.bothRefs.put(key, bothRefsItem);
    return this;
  }

  /**
   * Get bothRefs
   * @return bothRefs
   **/
  public Map<String, Simple> getBothRefs() {
    return bothRefs;
  }

  public void setBothRefs(Map<String, Simple> bothRefs) {
    this.bothRefs = bothRefs;
  }

  public MapsDto objects(Map<String, Object> objects) {
    this.objects = objects;
    return this;
  }

  public MapsDto putObjectsItem(String key, Object objectsItem) {
    if (this.objects == null) {
      this.objects = new HashMap<>();
    }
    this.objects.put(key, objectsItem);
    return this;
  }

  /**
   * Get objects
   * @return objects
   **/
  public Map<String, Object> getObjects() {
    return objects;
  }

  public void setObjects(Map<String, Object> objects) {
    this.objects = objects;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MapsDto other = (MapsDto) o;
    return Objects.equals(this.booleans, other.booleans) &&
        Objects.equals(this.bytes, other.bytes) &&
        Objects.equals(this.shorts, other.shorts) &&
        Objects.equals(this.ints, other.ints) &&
        Objects.equals(this.longs, other.longs) &&
        Objects.equals(this.strings, other.strings) &&
        Objects.equals(this.refs, other.refs) &&
        Objects.equals(this.bothBooleans, other.bothBooleans) &&
        Objects.equals(this.bothBytes, other.bothBytes) &&
        Objects.equals(this.bothShorts, other.bothShorts) &&
        Objects.equals(this.bothInts, other.bothInts) &&
        Objects.equals(this.bothLongs, other.bothLongs) &&
        Objects.equals(this.bothStrings, other.bothStrings) &&
        Objects.equals(this.bothRefs, other.bothRefs) &&
        Objects.equals(this.objects, other.objects);
  }

  @Override
  public int hashCode() {
    return Objects.hash(booleans, bytes, shorts, ints, longs, strings, refs, bothBooleans, bothBytes, bothShorts, bothInts, bothLongs, bothStrings, bothRefs, objects);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MapsDto {\n");
    
    sb.append("    booleans: ").append(toIndentedString(booleans)).append("\n");
    sb.append("    bytes: ").append(toIndentedString(bytes)).append("\n");
    sb.append("    shorts: ").append(toIndentedString(shorts)).append("\n");
    sb.append("    ints: ").append(toIndentedString(ints)).append("\n");
    sb.append("    longs: ").append(toIndentedString(longs)).append("\n");
    sb.append("    strings: ").append(toIndentedString(strings)).append("\n");
    sb.append("    refs: ").append(toIndentedString(refs)).append("\n");
    sb.append("    bothBooleans: ").append(toIndentedString(bothBooleans)).append("\n");
    sb.append("    bothBytes: ").append(toIndentedString(bothBytes)).append("\n");
    sb.append("    bothShorts: ").append(toIndentedString(bothShorts)).append("\n");
    sb.append("    bothInts: ").append(toIndentedString(bothInts)).append("\n");
    sb.append("    bothLongs: ").append(toIndentedString(bothLongs)).append("\n");
    sb.append("    bothStrings: ").append(toIndentedString(bothStrings)).append("\n");
    sb.append("    bothRefs: ").append(toIndentedString(bothRefs)).append("\n");
    sb.append("    objects: ").append(toIndentedString(objects)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

